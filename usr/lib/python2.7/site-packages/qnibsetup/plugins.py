#! /usr/bin/env python
# -*- coding: utf-8 -*-

# load librarys
import socket
import time
import os
import envoy
from configobj import ConfigObj

import etcd
import netifaces


__author__    = 'Christian Kniep <christian()qnib.org>'
__copyright__ = 'Copyright 2014 Christian Kniep'
__license__   = """MIT License (http://opensource.org/licenses/MIT)"""


def inplace_change(filename, old_string, new_string):
    s=open(filename).read()
    res = False
    if old_string in s:
        s=s.replace(old_string, new_string)
        f=open(filename, 'w')
        f.write(s)
        f.flush()
        f.close()
        res = True
    return res

def qconfig_skydns(cfg):
    """ Configure local skydns server
    """
    # put my hostname into the startscript
    machines = ["http://%s:4001" % item for item in cfg.get('services', 'etcd').split(",")]
    return inplace_change('/root/bin/start_skydns.sh', "MACHINES", ",".join(machines))

def qconfig_etcd(cfg):
    """ Configure local etcd server
    """
    # put my hostname into the startscript
    print cfg.get('services', 'etcd')
    if cfg.get('defaults', 'docker_dns') == 'True':
        return inplace_change("/root/bin/start_etcd.sh", "HOSTNAME", socket.gethostname())
    else:
        # if we are not the DNS server, we have to take the IP, otherwise no one
        # will connect to <host>:4001 <host>:7001
        my_ipv4 = netifaces.ifaddresses('eth0')[netifaces.AF_INET][0]['addr']
        return inplace_change("/root/bin/start_etcd.sh", "HOSTNAME", my_ipv4)

def qsetup_carbon(cfg, srv_hosts):
    """ setup the carbon related services (diamond)
    """
    srv_host = srv_hosts[0]
    if len(srv_hosts) >= 2:
        cfg.log.info("Multiple carbon hosts configured ('%s'), only using the first one..." % ",".join(srv_hosts))
    # setup diamond-cfg if available
    handler_cfg = ConfigObj("/etc/diamond/handlers/GraphiteHandler.conf")
    if srv_host != handler_cfg['host']:
        cfg.log.info("Overwrite host '%s' by '%s'" % (handler_cfg['host'], srv_host))
        handler_cfg['host'] = srv_host
        with open("/etc/diamond/handlers/GraphiteHandler.conf", "w") as fd:
            handler_cfg.write(fd)
        return True
    return False

def qsetup_dns(_, srv_hosts):
    """ setup the dns related service (?)
    """
    pass

def qsetup_syslog(cfg, srv_hosts):
    """ setup the syslog remote target
    """
    for srv_host in srv_hosts:
        dst = srv_host.replace(".", "_")
        add_syslog_fwd(dst, 514)

def add_syslog_fwd(dst, port):
    """ add destination for syslog-ng
    """
    cfg_path = "/etc/syslog-ng/conf.d/%s.conf" % dst
    new_lines = [
        "destination d_%s { tcp(\"%s\" port(%s)); };" % (dst, dst, port),
        "log { source(s_sys); destination(d_%s); };" % dst,
        ]
    def wr_cfg(lines):
        with open(cfg_path, "w") as fd:
            fd.write("\n".join(lines))
            fd.write("\n")

    if os.path.exists(cfg_path):
        with open(cfg_path, "r") as fd:
            old_lines = [line.strip() for line in fd.readlines() if line.strip() != ""]
        if old_lines != [str(line) for line in new_lines]:
            print "rewrite"
            wr_cfg(new_lines)
    else:
        wr_cfg(new_lines)

def qsetup_logstash(cfg, srv_hosts):
    """ setup logstash target
    """
    for srv_host in srv_hosts:
        dst = srv_host.replace(".", "_")
        add_syslog_fwd(dst, 5514)

def qsetup_etcd(_, srv_hosts):
    """ setup the etcd service
    """
    my_ipv4 = netifaces.ifaddresses('eth0')[netifaces.AF_INET][0]['addr']
    my_ipv6 = netifaces.ifaddresses('eth0')[netifaces.AF_INET6][0]['addr']
    try:
        my_ipv6 = my_ipv6.split("%")[0]
    except:
        pass
    my_host = socket.gethostname()
    ptr_rec = {
        "helix": ("/helix/arpa/in-addr/%s/PTR" % my_ipv4.replace(".", "/"), "%s." % my_host),
        "skydns": ("/skydns/arpa/in-addr/%s" % my_ipv4.replace(".", "/"), '{"host":"%s"}' % my_host),
    }
    a_rec = {
        'helix': ("/helix/%s/A" % my_host, my_ipv4),
        "skydns": ("/skydns/%s" % my_host, '{"host":"%s"}' % my_host),
    }
    aaaa_rec = {
        'helix': ("/helix/%s/AAAA" % my_host, my_ipv6),
        'skydns': None,
    }
    for srv_host in srv_hosts:
        client = etcd.Client(host=srv_host)
        # set A record
        for dns_server, tup in a_rec.items():
            (key, val) = tup
            client.write(key, val)
        # set AAAA record
        for dns_server, tup in aaaa_rec.items():
            if tup is None:
                continue
            (key, val) = tup
            client.write(key, val)
        # set PTR record
        for dns_server, tup in ptr_rec.items():
            (key, val) = tup
            client.write(key, val)
        # trigger update
        client.write("/update_helix", int(time.time()))
    return False

