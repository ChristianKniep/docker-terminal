#! /usr/bin/env python
# -*- coding: utf-8 -*-

# load librarys
import socket
import time
import os
import re
import envoy
from configobj import ConfigObj

import etcd
import netifaces


__author__    = 'Christian Kniep <christian()qnib.org>'
__copyright__ = 'Copyright 2014 Christian Kniep'
__license__   = """MIT License (http://opensource.org/licenses/MIT)"""


class QnibSetupPlugins(object):
    """ Plugins class
    """
    def __init__(self, cfg):
        """ init things
        """
        self._cfg = cfg
        self._etcd = None

def line_change(filename, old_string, new_string):
    old_lines = open(filename).readlines()
    new_lines = []
    regex = re.compile(old_string)
    do_rewrite = False
    for old_line in old_lines:
        old_line = old_line.strip()
        if re.match(regex, old_line):
            new_lines.append(regex.sub(new_string, old_line))
            do_rewrite = True
        else:
            new_lines.append(old_line)
        if do_rewrite:
            with open(filename, 'w') as fd:
                fd.write("\n".join(new_lines))
    return do_rewrite

def inplace_change(filename, old_string, new_string):
    s=open(filename).read()
    res = False
    if old_string in s:
        s=s.replace(old_string, new_string)
        f=open(filename, 'w')
        f.write(s)
        f.flush()
        f.close()
        res = True
    return res

def qconfig_skydns(cfg):
    """ Configure local skydns server
    """
    # put my hostname into the startscript
    machines = []
    cfg.update_cfg('local', 'dns', 53)
    if cfg.has_option('services', 'etcd'):
        machines.extend(["http://%s:4001" % item for item in cfg.get('services', 'etcd').split(",")])
    res = False
    res |= inplace_change('/root/bin/start_skydns.sh', "DOMAIN", cfg.get('defaults', 'domain'))
    if len(machines) == 0:
        res |= inplace_change('/root/bin/start_skydns.sh', "MACHINES", "http://127.0.0.1:4001")
    else:
        res |= inplace_change('/root/bin/start_skydns.sh', "MACHINES", ",".join(machines))
    return res

def qconfig_nginx(cfg):
    """ Configure local nginx server
    """
    dpath = '/etc/nginx/conf.d/'
    for fpath in os.listdir(dpath):
        with open(os.path.join(dpath, fpath), "r") as fd:
            lines = fd.readlines()
        opt = fpath.split(".")[0]
        for line in lines:
            mat = re.match("listen.*\:(\d+)", line.strip())
            if mat:
                port = mat.group(1)
                cfg.update_cfg('local', opt, port)
    return False

def qconfig_syslog_ng(cfg):
    """ Check if syslog-ng's targets are correct
    """
    cfg.log.info("OK, lets configure syslog-ng")



def qconfig_logstash(cfg):
    """ Propagate syslog target
    """
    cfg.update_cfg('local', 'logstash', 5514)

def qconfig_statsd(cfg):
    """ Propagate statsd target
    """
    cfg.update_cfg('local', 'statsd', 8125)
    ## fetch carbon and configure
    line_change('/etc/statsd/config.js', ', graphiteHost: .*', ", graphiteHost: \"carbon.qnib\"")

def qconfig_elasticsearch(cfg):
    """ Setup ES
    """
    cfg.update_cfg('local', 'elasticsearch', 9200)

def qconfig_etcd(cfg):
    """ Configure local etcd server
    """
    my_ipv4 = netifaces.ifaddresses('eth0')[netifaces.AF_INET][0]['addr']
    etcd_lst = []
    if cfg.has_option('services', 'etcd'):
        etcd_lst.extend(cfg.get('services', 'etcd').split(","))
    if len(etcd_lst) > 0:
        # If there is a linked etcd-server, we skip setting up etcd
        return False
    cfg.update_cfg('local', 'etcd', 4001)
    if cfg.get('defaults', 'docker_dns') == 'True':
        res = inplace_change("/root/bin/start_etcd.sh", "HOSTNAME", socket.gethostname())
    else:
        # if we are not the DNS server, we have to take the IP, otherwise no one
        # will connect to <host>:4001 <host>:7001
        res = inplace_change("/root/bin/start_etcd.sh", "HOSTNAME", my_ipv4)
    return res

def qsetup_carbon(cfg, srv_hosts):
    """ setup the carbon related services (diamond)
    """
    srv_host = srv_hosts[0]
    if len(srv_hosts) >= 2:
        cfg.log.info("Multiple carbon hosts configured ('%s'), only using the first one..." % ",".join(srv_hosts))
    # setup diamond-cfg if available
    fpath = "/etc/diamond/handlers/GraphiteHandler.conf"
    my_domain = cfg.get('defaults', 'domain')
    if re.match("\d+\.\d+\.\d+\.\d+", srv_host):
        carbon_target = srv_host
    else:
        carbon_target = "%s.%s" % (srv_host, my_domain)
    return line_change(fpath, "host = .*", "host = %s" % carbon_target)

def qsetup_dns(_, srv_hosts):
    """ setup the dns related service (?)
    """
    pass

def qsetup_syslog(cfg, srv_hosts):
    """ setup the syslog remote target
    """
    for srv_host in srv_hosts:
        dst = srv_host.replace(".", "_")
        add_syslog_fwd(dst, 514)

def add_syslog_fwd(srv_host, port):
    """ add destination for syslog-ng
    """
    dst = srv_host.replace(".", "_")
    cfg_path = "/etc/syslog-ng/conf.d/%s.conf" % dst
    new_lines = [
        "destination d_%s { tcp(\"%s\" port(%s)); };" % (dst, srv_host, port),
        "log { source(s_sys); destination(d_%s); };" % dst,
        ]
    def wr_cfg(lines):
        with open(cfg_path, "w") as fd:
            fd.write("\n".join(lines))
            fd.write("\n")

    if os.path.exists(cfg_path):
        with open(cfg_path, "r") as fd:
            old_lines = [line.strip() for line in fd.readlines() if line.strip() != ""]
        if old_lines != [str(line) for line in new_lines]:
            wr_cfg(new_lines)
    else:
        wr_cfg(new_lines)

def qsetup_logstash(cfg, srv_hosts):
    """ setup logstash target
    """
    for srv_host in srv_hosts:
        add_syslog_fwd(srv_host, 5514)

def qsetup_etcd(cfg, srv_hosts):
    """ setup the etcd service
    """
    my_ipv4 = netifaces.ifaddresses('eth0')[netifaces.AF_INET][0]['addr']
    my_domain = cfg.get('defaults', 'domain')
    my_host = socket.gethostname()
    opts = cfg.options('local')
    rec_keys = {
        'ptr': "/skydns/arpa/in-addr/%s" % my_ipv4.replace(".", "/"),
        'a': "/skydns/%s/%s" % (my_domain, my_host),
        }
    rec_vals = {
        'ptr': '{"Host":"%s.%s"}' % (my_host, my_domain),
        'a': '{"Host":"%s"}' %  my_ipv4,
        }
    if len(opts) > 1:
        cfg.log.info("More then one local service, creating CNAMEs")
        for opt in opts:
            rec_keys[opt] = "/skydns/%s/%s" % (my_domain, opt)
            port = cfg.get('local', opt)
            rec_vals[opt] = '{"port":%s, "priority":11, "weight":10, "host":"%s"}' % (port, my_ipv4)
    for opt in opts:
        port = cfg.get('local', opt)
        rec_vals["a"] = '{"port":%s, "priority":11, "weight":10, "host":"%s"}' % (port, my_ipv4)
    for srv_host in srv_hosts:
        client = etcd.Client(host=srv_host)
        for id, key in rec_keys.items():
            client.write(key, rec_vals[id])
        # trigger update
        client.write("/update_dns", int(time.time()))
    return False

